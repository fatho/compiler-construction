imports
{
import CCO.SourcePos
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

{
type Var = String    -- ^ Type of variables.
type Name = String   -- ^ Names of datatypes and constructors and primitive functions
}

data Mod
  | Mod dataTypes :: DataTyL tm :: Tm

data DataTy
  | DataTy pos :: {SourcePos} dty :: DataTy_ 
  
data DataTy_
  | DataTy_ name :: Name dcons :: DataConL

data DataCon
  | DataCon pos :: {SourcePos} dcon :: DataCon_

data DataCon_
  | DataCon_ name :: Name arity :: Int
  
type DataConL = [DataCon]

type DataTyL = [DataTy]

data Tm
  | Tm  pos :: {SourcePos}  t :: Tm_

type TmL = [Tm]

data Tm_
  | Nat  i :: {Int}
  | Var  x :: {Var}
  | Lam  x :: {Var}  t1 :: Tm
  | App  t1 :: Tm  t2 :: Tm
  | Let  x :: {Var}  t1 :: Tm  t2 :: Tm
  | Prim fn :: String args :: TmL
  | If cond :: Tm t1 :: Tm t2 :: Tm -- if cond then t1 else t2
    -- a case statement consists of the scrutinee and an exhaustive
    -- list of alternatives ascendingly ordered by tag.
  | Case scrut :: Tm alts :: AltL

type AltL = [Alt]

data Alt
  -- An alternatives consist of the constructor it matches, and a 
  -- number of variables that are bound to the constructor fields.
  -- Nested patterns are not supported.
  | Alt con :: Name vars :: {[Name]} tm :: Tm

deriving Tm Tm_ Alt : Show


{

isVar :: Tm -> Bool
isVar (Tm _ (Var _)) = True
isVar _              = False

}