-------------------------------------------------------------------------------
-- Attr grammar
-------------------------------------------------------------------------------
imports
{
import qualified CCO.Core.AG as CR
import qualified Data.Map as Map

import Debug.Trace
}

{
isANF :: Tm -> Bool
isANF (Tm _ t) = isANF_ t

isANF_ :: Tm_ -> Bool
isANF_ (Nat _) = True
isANF_ (Var _) = True
isANF_ _       = False

nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

toSpecialName :: Int -> String
toSpecialName i = "$" ++ show i

introduceLets :: Tm -> Bindings -> Tm
introduceLets = foldr (\(x, pos, tm) body -> Tm pos (Let x tm body))

type Bindings = [(String, SourcePos, Tm)]
}

data ToANF
  | ToANF t :: Tm

attr ToANF
  syn anf :: Tm

attr Tm Tm_ 
  -- syn anf         :: Tm_
  chn counter     :: Int 
  -- chn aenv        :: AppEnv
  
  syn bindings    :: {Bindings}

attr Tm Tm_
  syn noLetTm     :: Tm

sem ToANF
  | ToANF lhs.anf   = introduceLets @t.noLetTm @t.bindings
          t.counter = 0

sem Tm_
  | Lam lhs.noLetTm  = Tm @lhs.pos $Lam @x (introduceLets @t1.noLetTm @t1.bindings)
        lhs.bindings = []
  | Let lhs.noLetTm  = @t2.noLetTm
        lhs.bindings = @t1.bindings ++ [(@x, @lhs.pos, @t1.noLetTm)] ++ @t2.bindings
  | If  loc.unique :: uniqueref counter
        loc.anfref   = toSpecialName @unique
        loc.isAnfCond = isANF @cond.noLetTm
        loc.thenTm    = (introduceLets @t1.noLetTm @t1.bindings)
        loc.elseTm    = (introduceLets @t2.noLetTm @t2.bindings)
        lhs.noLetTm  = Tm @lhs.pos $ if @isAnfCond 
                        then If @cond.noLetTm @thenTm @elseTm
                        else If (Tm @cond.pos (Var @anfref)) @thenTm @elseTm
        loc.optNewBinding = if @loc.isAnfCond
                              then [] 
                              else [(@loc.anfref, @lhs.pos, @cond.noLetTm)]
        lhs.bindings = @cond.bindings ++ @optNewBinding
  | Var Nat Prim lhs.noLetTm = Tm @lhs.pos @self
                 lhs.bindings = []
  | App loc.unique :: uniqueref counter
        loc.anfref   = toSpecialName @unique
        loc.isAnfArg = isANF @t2.noLetTm
        lhs.noLetTm  = Tm @lhs.pos $ if @loc.isAnfArg 
                        then App @t1.noLetTm @t2.noLetTm 
                        else App @t1.noLetTm (Tm @t2.pos (Var @anfref))
        loc.optNewBinding = if @loc.isAnfArg 
                              then [] 
                              else [(@loc.anfref, @lhs.pos, @t2.noLetTm)]
        lhs.bindings = @t1.bindings ++ @t2.bindings ++ @loc.optNewBinding
        
{-sem Tm_
  | Var Nat lhs.anf = @self
  | Lam 
  | App loc.unique :: uniqueref counter
        loc.anfref = toSpecialName @unique
        lhs.aenv   = if isANF @t2.anf then @t2.aenv            else Map.insert @anfref @t2.anf @t2.aenv
        lhs.anf    = if isANF @t2.anf then App @t1.anf @t2.anf else App @t1.anf (Var (toSpecialName @anfref))
  | Let

attr Tm  syn anf :: Tm
attr Tm_ syn anf_ :: Tm_

sem Tm
  | Tm lhs.anf = Tm @pos @t.anf_

sem Tm_
  | Var Nat lhs.anf_ = @self
  | Lam lhs.anf_ = Lam @x @t1.anf
  | App lhs.anf_ = if isANF @t1 then @t1.anf else Let (binds @t2) ( App bind @t1 )
  | Let lhs.anf_ = Let @x @t1.anf @t2.anf
-}
{-

let x = let y = 5 in y ni in id (id x) ni

[("y", 5)
,("x","y")]
,("$1", id x)]

Example 1:

let fv = 5 in
let id = \x . x in
((id id) id) (id (id (id fv)))
ni ni

Example 2:

let fv = 5 in 
let id = \x . x in
(id (id id)) (id fv)
ni ni

let fv = 5 in 
let id = \x . x in
  let y = id id in 
      let idfv = id fv in
        (id y) idfv
ni ni ni ni

module Main 104 -> app (app (m.1)(m.2))(m.3);
5;
\1,100 -> d.0.0;
app (m.1)(m.1);
app (m.1)(m.0);

app (app d.0.0 (app d.0.1 1)) 2



app (let 2 -> app d.0.1 1 in app d.0.0 d.0.2) 2
-}

{-

hmToANF :: Tm -> Tm
hmToANF (Tm sp t) = Tm sp (toANF t)

toANF :: Tm_ -> Tm_
toANF n@(Nat _)             = n
toANF v@(Var _)             = v
toANF (Lam x t1)            = Lam x (hmToANF t1)
-- TODO: figure out appBind and lamBind (name + counter?)
toANF (App t1 t2@(App _ _)) = Let (Var appBind) {- = -} (hmToANF t2) {- in -} (App (hmToANF t1) (Var appBind))
toANF (App t1 t2@(Lam _ _)) = Let (Var lamBind) {- = -} (hmToANF t2) {- in -} (App (hmToANF t1) (Var lamBind))
toANF (App t1 t2)           = App   (hmToANF t1) (hmToANF t2) 
toANF (Let x t1 t2)         = Let x (hmToANF t1) (hmToANF t2)

-}