imports
{
import qualified UHC.Light.Compiler.CoreRun.API as CR
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

data Mod
  | Mod  main  :: Exp
         meta  :: MetaL
         binds :: BindL

data MetaDataCon
  | MetaDataCon name :: String
                tag  :: Int

type MetaDataConL = [MetaDataCon]

data Meta
  | MetaDataType name  :: String
                 dcons :: MetaDataConL

type MetaL = [Meta]

data Ref
  | Glob offset     :: {Int}
  | Loc  levdiff    :: {Int}
         offset     :: {Int}
  | Tag  ref        :: Ref
  | Field ref :: Ref idx :: Int

type RefL = [Ref]

data SExp
  | Int  i :: {Int}
  | Var  x :: Ref

type SExpL = [SExp]

data Exp
  | SExp sexp :: SExp
  | Lam  args :: RefL
         body :: Exp
  | App  func :: Exp
         args :: SExpL
  | Prim func :: {String}
         args :: SExpL
  | Node tag  :: {Int}
         args :: SExpL
  | Case sexp :: SExp
         alts :: ExpL
  | Let  bind :: Bind
         body :: Exp
  | Dbg  info :: {String}
  | Eval thunk :: Exp

type ExpL = [Exp]

data Bind
  | Bind x    :: Ref
         xexp :: Exp

type BindL = [Bind]

deriving Exp SExp Bind Ref Meta MetaDataCon Mod : Show