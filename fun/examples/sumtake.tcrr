module sumtake8 18 -> eval({- main -} m.14);
export "u3_95" = 13;
export "C" = 10;
export "False" = 7;
export "N" = 6;
export "True" = 5;
export "eq" = 2;
export "head" = 4;
export "isnil" = 8;
export "l" = 11;
export "main" = 14;
export "minus" = 1;
export "plus" = 0;
export "sum" = 9;
export "tail" = 3;
export "take" = 12;
data "Bool" = "False" -> 0, "True" -> 1;
data "L" = "C" -> 0, "N" -> 1;
{- {- plus -} m.0 -} \2,6 -> let 2 -> {- d.0.2 -} eval(d.0.0); in
                             let 3 -> {- d.0.3 -} eval(d.0.1); in
                             ffi "primAddInt"(d.0.2,d.0.3);
{- {- minus -} m.1 -} \2,6 -> let 2 -> {- d.0.2 -} eval(d.0.0); in
                              let 3 -> {- d.0.3 -} eval(d.0.1); in
                              ffi "primSubInt"(d.0.2,d.0.3);
{- {- eq -} m.2 -} \2,6 -> let 2 -> {- d.0.2 -} eval(d.0.0); in
                           let 3 -> {- d.0.3 -} eval(d.0.1); in
                           ffi "primEqInt"(d.0.2,d.0.3);
{- {- tail -} m.3 -} \1,3 -> let 1 -> {- d.0.1 -} eval(d.0.0); in
                             case d.0.1.tag of
                              {- 0 -} -> tail(eval(d.0.1.1));
                              {- 1 -} -> tail(eval(u."undefined"));;
{- {- head -} m.4 -} \1,3 -> let 1 -> {- d.0.1 -} eval(d.0.0); in
                             case d.0.1.tag of
                              {- 0 -} -> tail(eval(d.0.1.0));
                              {- 1 -} -> tail(eval(u."undefined"));;
{- {- True -} m.5 -} alloc 1();
{- {- N -} m.6 -} alloc 1();
{- {- False -} m.7 -} alloc 0();
{- {- isnil -} m.8 -} \1,3 -> let 1 -> {- d.0.1 -} eval(d.0.0); in
                              case d.0.1.tag of
                               {- 0 -} -> tail(eval({- False -} m.7));
                               {- 1 -} -> tail(eval({- True -} m.5));;
{- {- sum -} m.9 -} \1,8 -> let 1 -> {- d.0.1 -} \0,2 -> tail(app (eval({- isnil -} m.8))(d.1.0)); in
                            let 2 -> {- d.0.2 -} eval(d.0.1); in
                            case d.0.2.tag of
                             {- 0 -} -> let 3 -> {- d.0.3 -} \0,2 -> tail(app (eval({- tail -} m.3))(d.1.0)); in
                                        let 4 -> {- d.0.4 -} \0,2 -> tail(app (eval({- sum -} m.9))(d.1.3)); in
                                        let 5 -> {- d.0.5 -} \0,2 -> tail(app (eval({- head -} m.4))(d.1.0)); in
                                        let 6 -> {- d.0.6 -} \0,3 -> tail(app (eval({- plus -} m.0))(d.1.5,d.1.4)); in
                                        tail(eval(d.0.6));
                             {- 1 -} -> tail(0);;
{- {- C -} m.10 -} \2,4 -> alloc 0(d.0.0,d.0.1);
{- {- l -} m.11 -} \0,3 -> tail(app (eval({- C -} m.10))(3,{- l -} m.11));
{- {- take -} m.12 -} \2,12 -> let 2 -> {- d.0.2 -} \0,3 -> tail(app (eval({- eq -} m.2))(d.1.0,0)); in
                               let 3 -> {- d.0.3 -} eval(d.0.2); in
                               case d.0.3.tag of
                                {- 0 -} -> let 4 -> {- d.0.4 -} \0,2 -> tail(app (eval({- isnil -} m.8))(d.1.1)); in
                                           let 5 -> {- d.0.5 -} eval(d.0.4); in
                                           case d.0.5.tag of
                                            {- 0 -} -> let 6 -> {- d.0.6 -} \0,2 -> tail(app (eval({- tail -} m.3))(d.1.1)); in
                                                       let 7 -> {- d.0.7 -} \0,3 -> tail(app (eval({- minus -} m.1))(d.1.0,1)); in
                                                       let 8 -> {- d.0.8 -} \0,3 -> tail(app (eval({- take -} m.12))(d.1.7,d.1.6)); in
                                                       let 9 -> {- d.0.9 -} \0,2 -> tail(app (eval({- head -} m.4))(d.1.1)); in
                                                       let 10 -> {- d.0.10 -} \0,3 -> tail(app (eval({- C -} m.10))(d.1.9,d.1.8)); in
                                                       tail(eval(d.0.10));
                                            {- 1 -} -> tail(eval({- N -} m.6));;
                                {- 1 -} -> tail(eval({- N -} m.6));;
{- {- u3_95 -} m.13 -} \0,3 -> tail(app (eval({- take -} m.12))(3,{- l -} m.11));
{- {- main -} m.14 -} \0,2 -> tail(app (eval({- sum -} m.9))({- u3_95 -} m.13));
