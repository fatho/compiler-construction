{-
In this attribute grammar, values needed for monotone frameworks are computed.
-}

imports
{
import Data.Maybe
import Data.List (find)
import qualified Data.Set as Set
import qualified Data.Map.Strict as Map
import qualified Data.Foldable as Foldable
}

{
    
-- | Type of code blocks
data Block 
    = BBlock         Label     BExpr -- ^ boolean expression
    | SkipBlock      Label           -- ^ skip instruction
    | IAssignBlock   Label Var IExpr -- ^ integer assignment
    | ProcBeginBlock Label           -- ^ procedure entry
    | ProcEndBlock   Label           -- ^ procedure exit
    | CallBlock      Label     Label Var Exprs Var -- ^ procedure call
    | BAssignBlock   Label Var BExpr -- ^ boolean assignment
    | MallocBlock    Label Var IExpr -- ^ malloc assignment
    | FreeBlock      Label IExpr     -- ^ free statement
    | RefAssignBlock Label IExpr IExpr -- ^ reference assignment @*foo := bar@
    | ContinueBlock  Label -- ^ while continue
    | BreakBlock     Label -- ^ while break
  deriving (Eq, Show)
    
-- | A directed flow edge
data Flow l = Flow { from :: l, to :: l }
  deriving (Eq, Ord, Show, Read)

-- | A directed interflow
data InterFlow l = InterFlow { fromOuter, toProc, fromProc, toOuter :: l }
  deriving (Eq, Ord, Show, Read)

-- | The call flow part of an interflow. 
callFlow :: InterFlow l -> Flow l
callFlow ifl = Flow (fromOuter ifl) (toProc ifl)
  
-- | The return flow part of an interflow.
returnFlow :: InterFlow l -> Flow l
returnFlow ifl = Flow (fromProc ifl) (toOuter ifl)

-- | Reverse the flow direction
reverseFlow :: Flows -> Flows
reverseFlow = map (\(Flow x y) -> Flow y x)

-- | Reverse the inter-flow direction
reverseInterFlow :: InterFlows -> InterFlows
reverseInterFlow = map (\(InterFlow a b c d) -> InterFlow d c b a)

-- | List of flows
type Flows = [Flow Label]
-- | List of interflows
type InterFlows = [InterFlow Label]

-- | Describes the scope (including the variables defined there) to which a label belongs
data Scope 
    = Global    (Set.Set Var) -- ^ global scope
    | Local Var (Set.Set Var) -- ^ local scope of procedure

localVars :: Scope -> Set.Set Var
localVars (Global _)   = Set.empty
localVars (Local _ vs) = vs
}

attr Program' Stat'
    -- | Initial label of a program or statement
    syn init   :: Label
    -- | Final labels of a program or statement
    syn finals use {++} {[]} :: {[Label]}

attr Program' Stat' Procs' Proc'
    syn blocks    use {++} {[]} :: {[Block]}     -- all blocks
    syn flow      use {++} {[]} :: {Flows}       -- all flows
    syn interflow use {++} {[]} :: {InterFlows}  -- all interflows
    
attr Stat' Procs' Proc'
    -- procedure environment, used for looking up details about a procedure at call sites.
    inh procs :: Procs'

attr Program'
    -- computes the global variables in a program
    syn globalVars :: {Set.Set Var}

attr Procs' Proc'
    -- provides information about the global variables to procedures
    inh globalVars :: {Set.Set Var}

attr Proc'
    -- computes the local variables of a procedure. local variables are those that are not global.
    -- argument variables shadow eventual global variables of the same name.
    syn localVars  :: {Set.Set Var} 

attr Stat' Exprs Expr IExpr BExpr
    -- returns the set of variables used in the respective syntactic construct
    syn vars use {Set.union} {Set.empty} :: {Set.Set Var}

attr Program' Procs' Proc'
    -- scope in which a label is defined (global or local to a procedure)
    syn labelScope use {Map.union} {Map.empty} :: {Map.Map Label Scope}

attr Stat'
    -- lists of directly nested break and continue statements (only valid inside while-loops)
    syn directBreaks use {++} {[]} :: {[Label]}
    syn directContinues use {++} {[]} :: {[Label]}

sem Program'
    | Program' stat. procs      = @procs.self
               procs.procs      = @procs.self

----------------------------------------------------------------------------------------
-- Init
----------------------------------------------------------------------------------------

sem Stat'
    | Skip'       lhs.init = @label
    | IfThenElse' lhs.init = @labelc
    | While'      lhs.init = @labelc
    | IAssign'    lhs.init = @label
    | Call'       lhs.init = @labelCall
    | Seq'        lhs.init = @stat1.init
    | BAssign'    lhs.init = @label
    | Malloc'     lhs.init = @label
    | RefAssign'  lhs.init = @label
    | Free'       lhs.init = @label
    | Continue'   lhs.init = @label
    | Break'      lhs.init = @label
    
----------------------------------------------------------------------------------------
-- Finals
----------------------------------------------------------------------------------------

sem Stat'
    | Skip'       lhs.finals = [@label]
    | IfThenElse' lhs.finals = @stat1.finals ++ @stat2.finals
    | While'      lhs.finals = @labelc : @stat.directBreaks
                  lhs.directBreaks = []
    | IAssign'    lhs.finals = [@label]
    | Call'       lhs.finals = [@labelReturn]
    | Seq'        lhs.finals = @stat2.finals
    | BAssign'    lhs.finals = [@label]
    | Malloc'     lhs.finals = [@label]
    | RefAssign'  lhs.finals = [@label]
    | Free'       lhs.finals = [@label]
                  -- continue is never a final label. For a forward analysis, we come from a statement before,
                  -- for a backward analysis, we come from the loop condition.
    | Continue'   lhs.finals = [ ]
                  -- the label of break is a final label of the enclosing while
    | Break'      lhs.finals = [ ]
                  lhs.directBreaks = [@label]

----------------------------------------------------------------------------------------
-- Blocks
----------------------------------------------------------------------------------------

sem Stat'
    | Skip'       lhs.blocks = [SkipBlock @label]
    | IfThenElse' lhs.blocks = (BBlock @labelc @cond.self) : @stat1.blocks ++ @stat2.blocks
    | While'      lhs.blocks = (BBlock @labelc @cond.self) : @stat.blocks
    | IAssign'    lhs.blocks = [IAssignBlock @label @name @val.self]
    | Call'       lhs.blocks = [CallBlock @labelCall @labelReturn @name @params.self @out]
    | Seq'        lhs.blocks = @stat1.blocks ++ @stat2.blocks
    | BAssign'    lhs.blocks = [ BAssignBlock @label @name @val.self ]
    | Malloc'     lhs.blocks = [ MallocBlock @label @name @size.self ]
    | RefAssign'  lhs.blocks = [ RefAssignBlock @label @ptr.self @val.self ]
    | Free'       lhs.blocks = [ FreeBlock @label @ptr.self ]
    | Continue'   lhs.blocks = [ ContinueBlock @label ]
    | Break'      lhs.blocks = [ BreakBlock @label ]

sem Proc'
    | Proc'       lhs.blocks = [ ProcBeginBlock @labelEntry, ProcEndBlock @labelExit ] ++ @stat.blocks

----------------------------------------------------------------------------------------
-- Flow
----------------------------------------------------------------------------------------

sem Stat'
    | IfThenElse' lhs.flow = @stat1.flow ++ @stat2.flow ++ [Flow @labelc @stat1.init] 
                                ++ [Flow @labelc @stat2.init]
    | While'      lhs.flow = @stat.flow ++ [Flow @labelc @stat.init]
                                ++ zipWith Flow @stat.finals (repeat @labelc)
                                ++ zipWith Flow @stat.directContinues (repeat @labelc)
                  lhs.directContinues = []
    | Call'       loc.callee = findProc @name @lhs.procs
                  loc.lEntry    = labelEntry_Proc'_Proc' @callee
                  loc.lExit   = labelExit_Proc'_Proc' @callee
                  lhs.interflow = [ InterFlow @labelCall @lEntry @lExit @labelReturn ]
                  lhs.flow = [ Flow @labelCall @lEntry
                             , Flow @lExit @labelReturn ]
    | Seq'        lhs.flow = @stat1.flow ++ @stat2.flow ++ zipWith Flow @stat1.finals (repeat @stat2.init)
    | Continue'   lhs.directContinues = [@label]

sem Proc'
    | Proc'       lhs.flow = Flow @labelEntry @stat.init : zipWith Flow @stat.finals (repeat @labelExit)
                              ++ @stat.flow
    

----------------------------------------------------------------------------------------
-- Variables
----------------------------------------------------------------------------------------

sem Stat'
    | IAssign' lhs.vars = Set.insert @name @val.vars
    | Call'    lhs.vars = Set.insert @out @params.vars
    | BAssign' lhs.vars = Set.insert @name @val.vars
    | Malloc'  lhs.vars = Set.singleton @name

sem IExpr
    | Var lhs.vars = Set.singleton @name
    
sem BExpr
    | BVar lhs.vars = Set.singleton @name
        
sem Program'
    | Program' lhs  .globalVars = @stat.vars
               procs.globalVars = @stat.vars

sem Proc'
    -- all variables used in a procedure that are not global variables
    -- arguments shadow global variables
    | Proc'     loc.argVars   = Set.fromList (@out : @inp) 
                loc.localVars = Set.union (@stat.vars Set.\\ @lhs.globalVars) @argVars
                lhs.localVars = @loc.localVars  

----------------------------------------------------------------------------------------
-- Scope
----------------------------------------------------------------------------------------

sem Program'
    | Program' loc.globLblScope = Map.fromList $ zip (labels @stat.blocks) (repeat $ Global @stat.vars)
               lhs.labelScope = Map.union @loc.globLblScope @procs.labelScope

sem Proc'
    | Proc'    lhs.labelScope = Map.fromList $ zip (labels @stat.blocks) (repeat $ Local @name @loc.localVars)

{
-- | Generate next unique label. 
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

-- | Returns all the labels in a block.
labelsFromBlock :: Block -> [Label]
labelsFromBlock (BBlock       label _)       = [label]
labelsFromBlock (SkipBlock    label)         = [label]
labelsFromBlock (IAssignBlock label _ _)     = [label]
labelsFromBlock (CallBlock lCall lRet _ _ _) = [lCall, lRet]
labelsFromBlock (ProcBeginBlock label)       = [label]
labelsFromBlock (ProcEndBlock   label)       = [label]
labelsFromBlock (BAssignBlock   label _ _)   = [label]
labelsFromBlock (MallocBlock    label _ _)   = [label]
labelsFromBlock (FreeBlock      label _  )   = [label]
labelsFromBlock (RefAssignBlock label _ _)   = [label]
labelsFromBlock (ContinueBlock  label)       = [label]
labelsFromBlock (BreakBlock     label)       = [label]

-- | Returns all the labels in a collection of blocks
labels :: Foldable.Foldable t => t Block -> [Label]
labels = Foldable.foldMap labelsFromBlock

-- | Finds a procedure by its name.
findProc :: Var -> Procs' -> Proc'
findProc v ps = fromMaybe (error $ "procedure not found: " ++ v) $
  find (\p -> name_Proc'_Proc' p == v) ps

}