{-
Except for some additions, this file is roughly the same as the one distributed with the assignment.
-}

imports
{
import Control.Monad
import CCO.Printing
}

{
-- | Type used for labels
type Label = Int
-- | Type used for identifiers
type Var = String
}

data Program
  | Program   procs :: Procs
              stat  :: Stat
  deriving Program : Show

data Program'
  | Program'  procs :: Procs'
              stat :: Stat'
  deriving Program' : Show

data Proc
  | Proc          name :: Var  inp :: {[String]}  out :: String   stat :: Stat
deriving Proc : Show

data Proc'
  | Proc'         labelEntry :: Label  labelExit :: Label    name :: Var  inp :: {[String]}  out :: String   stat :: Stat'
deriving Proc' : Show

data Stat
  | Skip
  | IfThenElse    cond  :: {BExpr}      stat1  :: Stat       stat2 :: Stat
  | While         cond  :: {BExpr}      stat   :: Stat
  | Call          name  :: Var          params :: {Exprs}    out :: String
  | IAssign       name  :: Var          val    :: {IExpr}
  | BAssign       name  :: Var          val    :: {BExpr}
  | Seq           stat1 :: Stat         stat2  :: Stat
  | Malloc        name  :: Var          size   :: {IExpr}
  | Free          ptr   :: {IExpr}
  | RefAssign     ptr   :: {IExpr}      val    :: {IExpr}
  | Continue
  | Break
deriving Stat : Show

data Stat'
  | Skip'          label :: Label
  | IfThenElse'    labelc :: Label       cond  :: BExpr      stat1  :: Stat'     stat2 :: Stat'
  | While'         labelc :: Label       cond  :: BExpr      stat   :: Stat'
  | Call'          labelCall :: Label    labelReturn :: Label  name :: Var     params :: Exprs    out :: Var
  | IAssign'       label :: Label        name :: Var     val    :: IExpr
  | BAssign'       label :: Label        name :: Var     val    :: BExpr
  | Seq'           stat1 :: Stat'        stat2  :: Stat'
  | Malloc'        label :: Label        name :: Var     size   :: IExpr
  | Free'          label :: Label        ptr   :: IExpr
  | RefAssign'     label :: Label        ptr   :: IExpr      val :: IExpr
  | Continue'      label :: Label
  | Break'         label :: Label
deriving Stat' : Show

data IExpr 
  | IConst        val  :: Int
  | Var           name :: Var
  | Plus          left :: IExpr       right :: IExpr
  | Minus         left :: IExpr       right :: IExpr
  | Times         left :: IExpr       right :: IExpr
  | Divide        left :: IExpr       right :: IExpr
  | Deref         ptr  :: IExpr
deriving IExpr : Eq, Show

data BExpr
  | BConst        val  :: Bool
  | BVar          name :: Var
  | LessThan      left :: IExpr       right :: IExpr
  | GreaterThan   left :: IExpr       right :: IExpr
  | LessEqual     left :: IExpr       right :: IExpr
  | GreaterEqual  left :: IExpr       right :: IExpr
  | IEqual        left :: IExpr       right :: IExpr
  | BEqual        left :: BExpr       right :: BExpr
  | And           left :: BExpr       right :: BExpr
  | Or            left :: BExpr       right :: BExpr
  | Not           val  :: BExpr
deriving BExpr : Eq, Show


data Expr | B BExpr
          | I IExpr
deriving Expr : Eq, Show

data Code | CBExpr   BExpr
          | CIExpr   IExpr
          | CStat    Stat'
          | CProc    Proc'
          | CProgram Program'

type Procs = [Proc]
type Procs' = [Proc']
type Exprs = [Expr]

{
    
-- | Evaluates an 'IExpr' in an arbitrary numerical context.
-- We need this to be polymorphic, which is the reason why evaluation is
-- not implemented as attribute grammar.
-- AGs apparently support polymorphic Nonterminals, but no polymorphic attributes. 
evalIExpr :: (Monad f) => (Var -> f Int) -> (Int -> f Int) -> IExpr -> f Int
evalIExpr varInt deref = go where
  go (IConst v) = return v
  go (Var name) = varInt name
  go (Plus l r) = liftM2 (+) (go l) (go r)
  go (Minus l r) = liftM2 (-) (go l) (go r)
  go (Times l r) = liftM2 (*) (go l) (go r)
  go (Divide l r) = liftM2 div (go l) (go r)
  go (Deref x)    = go x >>= deref

-- | Evaluates an 'BExpr' in an arbitrary numerical context.
-- We need this to be polymorphic as well (see above).
evalBExpr :: (Monad f) => (Var -> f Bool) -> (Var -> f Int) -> (Int -> f Int) -> BExpr -> f Bool
evalBExpr varBool varInt deref = go where
  go (BConst v) = return v
  go (BVar name) = varBool name
  go (LessThan      l r) = liftM2 (<) (goInt l) (goInt r)
  go (GreaterThan   l r) = liftM2 (>) (goInt l) (goInt r)
  go (LessEqual     l r) = liftM2 (<=) (goInt l) (goInt r)
  go (GreaterEqual  l r) = liftM2 (>=) (goInt l) (goInt r)
  go (IEqual        l r) = liftM2 (==) (goInt l) (goInt r)
  go (BEqual        l r) = liftM2 (==) (go l) (go r)
  go (And           l r) = liftM2 (&&) (go l) (go r)
  go (Or            l r) = liftM2 (||) (go l) (go r)
  go (Not           val) = liftM not (go val)
  
  goInt = evalIExpr varInt deref

instance Printable Program where
  pp = showable
  
instance Printable Program' where
  pp = showable
}