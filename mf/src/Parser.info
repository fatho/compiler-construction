-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from Parser.y
-----------------------------------------------------------------------------

state 44 contains 4 reduce/reduce conflicts.
state 132 contains 2 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_happy -> Start                              (0)
	Start -> Program                                   (1)
	Program -> begin Procs Stats end                   (2)
	Procs -> Procs Proc                                (3)
	Procs ->                                           (4)
	Proc -> proc ident "(" ValArgs ResArg ")" is Stats end   (5)
	ValArgs -> val Args ","                            (6)
	ValArgs ->                                         (7)
	ResArg -> res Arg                                  (8)
	Args -> Args "," Arg                               (9)
	Args -> Arg                                        (10)
	Arg -> ident                                       (11)
	Stats -> Stats Stat                                (12)
	Stats -> Stat                                      (13)
	Stat -> if BExpr then Stat0 else Stat0             (14)
	Stat -> if BExpr then Stat0                        (15)
	Stat -> while BExpr do Stat0                       (16)
	Stat -> Stat0                                      (17)
	Stat0 -> skip ";"                                  (18)
	Stat0 -> ident ":=" AExpr ";"                      (19)
	Stat0 -> ident ":=" BExpr ";"                      (20)
	Stat0 -> "*" AExpr0 ":=" AExpr0 ";"                (21)
	Stat0 -> call ident "(" CallArgs "," ident ")" ";"   (22)
	Stat0 -> malloc "(" ident "," AExpr ")" ";"        (23)
	Stat0 -> free "(" AExpr0 ")" ";"                   (24)
	Stat0 -> "(" Stats ")"                             (25)
	Stat0 -> "{" Stats "}"                             (26)
	Stat0 -> continue ";"                              (27)
	Stat0 -> break ";"                                 (28)
	Stat0 -> tyint ident "[" AExpr "]" ";"             (29)
	Stat0 -> ident "[" AExpr "]" ":=" AExpr0 ";"       (30)
	CallArgs -> CallArgs "," EitherExpr                (31)
	CallArgs -> EitherExpr                             (32)
	CallArgs ->                                        (33)
	EitherExpr -> AExpr                                (34)
	EitherExpr -> BExpr                                (35)
	AExpr -> AExpr "+" AExpr                           (36)
	AExpr -> AExpr "-" AExpr                           (37)
	AExpr -> AExpr "*" AExpr                           (38)
	AExpr -> AExpr "/" AExpr                           (39)
	AExpr -> AExpr0                                    (40)
	AExpr0 -> int                                      (41)
	AExpr0 -> ident                                    (42)
	AExpr0 -> "(" AExpr ")"                            (43)
	AExpr0 -> "[" AExpr "]"                            (44)
	AExpr0 -> "*" AExpr0                               (45)
	AExpr0 -> ident "[" AExpr "]"                      (46)
	BExpr -> not BExpr                                 (47)
	BExpr -> BExpr and BExpr                           (48)
	BExpr -> BExpr or BExpr                            (49)
	BExpr -> BExpr "==" BExpr                          (50)
	BExpr -> AExpr "==" AExpr                          (51)
	BExpr -> AExpr "<" AExpr                           (52)
	BExpr -> AExpr ">" AExpr                           (53)
	BExpr -> AExpr ">=" AExpr                          (54)
	BExpr -> AExpr "<=" AExpr                          (55)
	BExpr -> BExpr0                                    (56)
	BExpr0 -> bool                                     (57)
	BExpr0 -> "(" BExpr ")"                            (58)
	BExpr0 -> ident                                    (59)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	ident          { TIdent $$ }
	int            { TInt $$ }
	bool           { TBool $$ }
	if             { TIf }
	then           { TThen }
	else           { TElse }
	while          { TWhile }
	do             { TDo }
	skip           { TSkip }
	not            { TNot }
	":="           { TAssign }
	"+"            { TArithmeticOp "+" }
	"-"            { TArithmeticOp "-" }
	"*"            { TStar }
	"/"            { TArithmeticOp "/" }
	and            { TBoolOp "and" }
	or             { TBoolOp "or" }
	"=="           { TRelOp "==" }
	"<"            { TRelOp "<" }
	">"            { TRelOp ">" }
	"<="           { TRelOp "<=" }
	">="           { TRelOp ">=" }
	";"            { TSemicolon }
	"["            { TBlockOpen }
	"]"            { TBlockClose }
	"("            { TParenOpen }
	")"            { TParenClose }
	"{"            { TBraceOpen }
	"}"            { TBraceClose }
	begin          { TBegin }
	end            { TEnd }
	proc           { TProc }
	is             { TIs }
	val            { TVal }
	res            { TRes }
	call           { TCall }
	","            { TComma }
	malloc         { TMalloc }
	free           { TFree }
	continue       { TContinue }
	break          { TBreak }
	tyint          { TTyInt }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_happy    rule  0
	Start           rule  1
	Program         rule  2
	Procs           rules 3, 4
	Proc            rule  5
	ValArgs         rules 6, 7
	ResArg          rule  8
	Args            rules 9, 10
	Arg             rule  11
	Stats           rules 12, 13
	Stat            rules 14, 15, 16, 17
	Stat0           rules 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	CallArgs        rules 31, 32, 33
	EitherExpr      rules 34, 35
	AExpr           rules 36, 37, 38, 39, 40
	AExpr0          rules 41, 42, 43, 44, 45, 46
	BExpr           rules 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
	BExpr0          rules 57, 58, 59

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	begin          shift, and enter state 3

	Start          goto state 4
	Program        goto state 2

State 1


	begin          shift, and enter state 3

	Program        goto state 2

State 2

	Start -> Program .                                  (rule 1)

	%eof           reduce using rule 1


State 3

	Program -> begin . Procs Stats end                  (rule 2)

	ident          reduce using rule 4
	if             reduce using rule 4
	while          reduce using rule 4
	skip           reduce using rule 4
	"*"            reduce using rule 4
	"("            reduce using rule 4
	"{"            reduce using rule 4
	proc           reduce using rule 4
	call           reduce using rule 4
	malloc         reduce using rule 4
	free           reduce using rule 4
	continue       reduce using rule 4
	break          reduce using rule 4
	tyint          reduce using rule 4

	Procs          goto state 5

State 4

	%start_happy -> Start .                             (rule 0)

	%eof           accept


State 5

	Program -> begin Procs . Stats end                  (rule 2)
	Procs -> Procs . Proc                               (rule 3)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	proc           shift, and enter state 17
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Proc           goto state 6
	Stats          goto state 7
	Stat           goto state 8
	Stat0          goto state 9

State 6

	Procs -> Procs Proc .                               (rule 3)

	ident          reduce using rule 3
	if             reduce using rule 3
	while          reduce using rule 3
	skip           reduce using rule 3
	"*"            reduce using rule 3
	"("            reduce using rule 3
	"{"            reduce using rule 3
	proc           reduce using rule 3
	call           reduce using rule 3
	malloc         reduce using rule 3
	free           reduce using rule 3
	continue       reduce using rule 3
	break          reduce using rule 3
	tyint          reduce using rule 3


State 7

	Program -> begin Procs Stats . end                  (rule 2)
	Stats -> Stats . Stat                               (rule 12)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	end            shift, and enter state 52
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat           goto state 51
	Stat0          goto state 9

State 8

	Stats -> Stat .                                     (rule 13)

	ident          reduce using rule 13
	if             reduce using rule 13
	while          reduce using rule 13
	skip           reduce using rule 13
	"*"            reduce using rule 13
	"("            reduce using rule 13
	")"            reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	end            reduce using rule 13
	call           reduce using rule 13
	malloc         reduce using rule 13
	free           reduce using rule 13
	continue       reduce using rule 13
	break          reduce using rule 13
	tyint          reduce using rule 13


State 9

	Stat -> Stat0 .                                     (rule 17)

	ident          reduce using rule 17
	if             reduce using rule 17
	while          reduce using rule 17
	skip           reduce using rule 17
	"*"            reduce using rule 17
	"("            reduce using rule 17
	")"            reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	end            reduce using rule 17
	call           reduce using rule 17
	malloc         reduce using rule 17
	free           reduce using rule 17
	continue       reduce using rule 17
	break          reduce using rule 17
	tyint          reduce using rule 17


State 10

	Stat0 -> ident . ":=" AExpr ";"                     (rule 19)
	Stat0 -> ident . ":=" BExpr ";"                     (rule 20)
	Stat0 -> ident . "[" AExpr "]" ":=" AExpr0 ";"      (rule 30)

	":="           shift, and enter state 49
	"["            shift, and enter state 50


State 11

	Stat -> if . BExpr then Stat0 else Stat0            (rule 14)
	Stat -> if . BExpr then Stat0                       (rule 15)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 40
	AExpr0         goto state 41
	BExpr          goto state 48
	BExpr0         goto state 43

State 12

	Stat -> while . BExpr do Stat0                      (rule 16)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 40
	AExpr0         goto state 41
	BExpr          goto state 42
	BExpr0         goto state 43

State 13

	Stat0 -> skip . ";"                                 (rule 18)

	";"            shift, and enter state 39


State 14

	Stat0 -> "*" . AExpr0 ":=" AExpr0 ";"               (rule 21)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr0         goto state 33

State 15

	Stat0 -> "(" . Stats ")"                            (rule 25)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stats          goto state 32
	Stat           goto state 8
	Stat0          goto state 9

State 16

	Stat0 -> "{" . Stats "}"                            (rule 26)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stats          goto state 31
	Stat           goto state 8
	Stat0          goto state 9

State 17

	Proc -> proc . ident "(" ValArgs ResArg ")" is Stats end    (rule 5)

	ident          shift, and enter state 30


State 18

	Stat0 -> call . ident "(" CallArgs "," ident ")" ";"    (rule 22)

	ident          shift, and enter state 29


State 19

	Stat0 -> malloc . "(" ident "," AExpr ")" ";"       (rule 23)

	"("            shift, and enter state 28


State 20

	Stat0 -> free . "(" AExpr0 ")" ";"                  (rule 24)

	"("            shift, and enter state 27


State 21

	Stat0 -> continue . ";"                             (rule 27)

	";"            shift, and enter state 26


State 22

	Stat0 -> break . ";"                                (rule 28)

	";"            shift, and enter state 25


State 23

	Stat0 -> tyint . ident "[" AExpr "]" ";"            (rule 29)

	ident          shift, and enter state 24


State 24

	Stat0 -> tyint ident . "[" AExpr "]" ";"            (rule 29)

	"["            shift, and enter state 84


State 25

	Stat0 -> break ";" .                                (rule 28)

	ident          reduce using rule 28
	if             reduce using rule 28
	else           reduce using rule 28
	while          reduce using rule 28
	skip           reduce using rule 28
	"*"            reduce using rule 28
	"("            reduce using rule 28
	")"            reduce using rule 28
	"{"            reduce using rule 28
	"}"            reduce using rule 28
	end            reduce using rule 28
	call           reduce using rule 28
	malloc         reduce using rule 28
	free           reduce using rule 28
	continue       reduce using rule 28
	break          reduce using rule 28
	tyint          reduce using rule 28


State 26

	Stat0 -> continue ";" .                             (rule 27)

	ident          reduce using rule 27
	if             reduce using rule 27
	else           reduce using rule 27
	while          reduce using rule 27
	skip           reduce using rule 27
	"*"            reduce using rule 27
	"("            reduce using rule 27
	")"            reduce using rule 27
	"{"            reduce using rule 27
	"}"            reduce using rule 27
	end            reduce using rule 27
	call           reduce using rule 27
	malloc         reduce using rule 27
	free           reduce using rule 27
	continue       reduce using rule 27
	break          reduce using rule 27
	tyint          reduce using rule 27


State 27

	Stat0 -> free "(" . AExpr0 ")" ";"                  (rule 24)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr0         goto state 83

State 28

	Stat0 -> malloc "(" . ident "," AExpr ")" ";"       (rule 23)

	ident          shift, and enter state 82


State 29

	Stat0 -> call ident . "(" CallArgs "," ident ")" ";"    (rule 22)

	"("            shift, and enter state 81


State 30

	Proc -> proc ident . "(" ValArgs ResArg ")" is Stats end    (rule 5)

	"("            shift, and enter state 80


State 31

	Stats -> Stats . Stat                               (rule 12)
	Stat0 -> "{" Stats . "}"                            (rule 26)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	"}"            shift, and enter state 79
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat           goto state 51
	Stat0          goto state 9

State 32

	Stats -> Stats . Stat                               (rule 12)
	Stat0 -> "(" Stats . ")"                            (rule 25)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	")"            shift, and enter state 78
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat           goto state 51
	Stat0          goto state 9

State 33

	Stat0 -> "*" AExpr0 . ":=" AExpr0 ";"               (rule 21)

	":="           shift, and enter state 77


State 34

	AExpr0 -> ident .                                   (rule 42)
	AExpr0 -> ident . "[" AExpr "]"                     (rule 46)

	then           reduce using rule 42
	do             reduce using rule 42
	":="           reduce using rule 42
	"+"            reduce using rule 42
	"-"            reduce using rule 42
	"*"            reduce using rule 42
	"/"            reduce using rule 42
	and            reduce using rule 42
	or             reduce using rule 42
	"=="           reduce using rule 42
	"<"            reduce using rule 42
	">"            reduce using rule 42
	"<="           reduce using rule 42
	">="           reduce using rule 42
	";"            reduce using rule 42
	"["            shift, and enter state 63
	"]"            reduce using rule 42
	")"            reduce using rule 42
	","            reduce using rule 42


State 35

	AExpr0 -> int .                                     (rule 41)

	then           reduce using rule 41
	do             reduce using rule 41
	":="           reduce using rule 41
	"+"            reduce using rule 41
	"-"            reduce using rule 41
	"*"            reduce using rule 41
	"/"            reduce using rule 41
	and            reduce using rule 41
	or             reduce using rule 41
	"=="           reduce using rule 41
	"<"            reduce using rule 41
	">"            reduce using rule 41
	"<="           reduce using rule 41
	">="           reduce using rule 41
	";"            reduce using rule 41
	"]"            reduce using rule 41
	")"            reduce using rule 41
	","            reduce using rule 41


State 36

	AExpr0 -> "*" . AExpr0                              (rule 45)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr0         goto state 76

State 37

	AExpr0 -> "[" . AExpr "]"                           (rule 44)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 75
	AExpr0         goto state 41

State 38

	AExpr0 -> "(" . AExpr ")"                           (rule 43)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 74
	AExpr0         goto state 41

State 39

	Stat0 -> skip ";" .                                 (rule 18)

	ident          reduce using rule 18
	if             reduce using rule 18
	else           reduce using rule 18
	while          reduce using rule 18
	skip           reduce using rule 18
	"*"            reduce using rule 18
	"("            reduce using rule 18
	")"            reduce using rule 18
	"{"            reduce using rule 18
	"}"            reduce using rule 18
	end            reduce using rule 18
	call           reduce using rule 18
	malloc         reduce using rule 18
	free           reduce using rule 18
	continue       reduce using rule 18
	break          reduce using rule 18
	tyint          reduce using rule 18


State 40

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr . "==" AExpr                         (rule 51)
	BExpr -> AExpr . "<" AExpr                          (rule 52)
	BExpr -> AExpr . ">" AExpr                          (rule 53)
	BExpr -> AExpr . ">=" AExpr                         (rule 54)
	BExpr -> AExpr . "<=" AExpr                         (rule 55)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"=="           shift, and enter state 69
	"<"            shift, and enter state 70
	">"            shift, and enter state 71
	"<="           shift, and enter state 72
	">="           shift, and enter state 73


State 41

	AExpr -> AExpr0 .                                   (rule 40)

	then           reduce using rule 40
	do             reduce using rule 40
	"+"            reduce using rule 40
	"-"            reduce using rule 40
	"*"            reduce using rule 40
	"/"            reduce using rule 40
	and            reduce using rule 40
	or             reduce using rule 40
	"=="           reduce using rule 40
	"<"            reduce using rule 40
	">"            reduce using rule 40
	"<="           reduce using rule 40
	">="           reduce using rule 40
	";"            reduce using rule 40
	"]"            reduce using rule 40
	")"            reduce using rule 40
	","            reduce using rule 40


State 42

	Stat -> while BExpr . do Stat0                      (rule 16)
	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	do             shift, and enter state 64
	and            shift, and enter state 57
	or             shift, and enter state 58
	"=="           shift, and enter state 59


State 43

	BExpr -> BExpr0 .                                   (rule 56)

	then           reduce using rule 56
	do             reduce using rule 56
	and            reduce using rule 56
	or             reduce using rule 56
	"=="           reduce using rule 56
	";"            reduce using rule 56
	")"            reduce using rule 56
	","            reduce using rule 56


State 44

	AExpr0 -> ident .                                   (rule 42)
	AExpr0 -> ident . "[" AExpr "]"                     (rule 46)
	BExpr0 -> ident .                                   (rule 59)

	then           reduce using rule 59
	do             reduce using rule 59
	"+"            reduce using rule 42
	"-"            reduce using rule 42
	"*"            reduce using rule 42
	"/"            reduce using rule 42
	and            reduce using rule 59
	or             reduce using rule 59
	"=="           reduce using rule 59
			(reduce using rule 42)

	"<"            reduce using rule 42
	">"            reduce using rule 42
	"<="           reduce using rule 42
	">="           reduce using rule 42
	";"            reduce using rule 59
			(reduce using rule 42)

	"["            shift, and enter state 63
	")"            reduce using rule 59
			(reduce using rule 42)

	","            reduce using rule 59
			(reduce using rule 42)



State 45

	BExpr0 -> bool .                                    (rule 57)

	then           reduce using rule 57
	do             reduce using rule 57
	and            reduce using rule 57
	or             reduce using rule 57
	"=="           reduce using rule 57
	";"            reduce using rule 57
	")"            reduce using rule 57
	","            reduce using rule 57


State 46

	BExpr -> not . BExpr                                (rule 47)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 40
	AExpr0         goto state 41
	BExpr          goto state 62
	BExpr0         goto state 43

State 47

	AExpr0 -> "(" . AExpr ")"                           (rule 43)
	BExpr0 -> "(" . BExpr ")"                           (rule 58)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 60
	AExpr0         goto state 41
	BExpr          goto state 61
	BExpr0         goto state 43

State 48

	Stat -> if BExpr . then Stat0 else Stat0            (rule 14)
	Stat -> if BExpr . then Stat0                       (rule 15)
	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	then           shift, and enter state 56
	and            shift, and enter state 57
	or             shift, and enter state 58
	"=="           shift, and enter state 59


State 49

	Stat0 -> ident ":=" . AExpr ";"                     (rule 19)
	Stat0 -> ident ":=" . BExpr ";"                     (rule 20)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 54
	AExpr0         goto state 41
	BExpr          goto state 55
	BExpr0         goto state 43

State 50

	Stat0 -> ident "[" . AExpr "]" ":=" AExpr0 ";"      (rule 30)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 53
	AExpr0         goto state 41

State 51

	Stats -> Stats Stat .                               (rule 12)

	ident          reduce using rule 12
	if             reduce using rule 12
	while          reduce using rule 12
	skip           reduce using rule 12
	"*"            reduce using rule 12
	"("            reduce using rule 12
	")"            reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	end            reduce using rule 12
	call           reduce using rule 12
	malloc         reduce using rule 12
	free           reduce using rule 12
	continue       reduce using rule 12
	break          reduce using rule 12
	tyint          reduce using rule 12


State 52

	Program -> begin Procs Stats end .                  (rule 2)

	%eof           reduce using rule 2


State 53

	Stat0 -> ident "[" AExpr . "]" ":=" AExpr0 ";"      (rule 30)
	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"]"            shift, and enter state 115


State 54

	Stat0 -> ident ":=" AExpr . ";"                     (rule 19)
	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr . "==" AExpr                         (rule 51)
	BExpr -> AExpr . "<" AExpr                          (rule 52)
	BExpr -> AExpr . ">" AExpr                          (rule 53)
	BExpr -> AExpr . ">=" AExpr                         (rule 54)
	BExpr -> AExpr . "<=" AExpr                         (rule 55)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"=="           shift, and enter state 69
	"<"            shift, and enter state 70
	">"            shift, and enter state 71
	"<="           shift, and enter state 72
	">="           shift, and enter state 73
	";"            shift, and enter state 114


State 55

	Stat0 -> ident ":=" BExpr . ";"                     (rule 20)
	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	and            shift, and enter state 57
	or             shift, and enter state 58
	"=="           shift, and enter state 59
	";"            shift, and enter state 113


State 56

	Stat -> if BExpr then . Stat0 else Stat0            (rule 14)
	Stat -> if BExpr then . Stat0                       (rule 15)

	ident          shift, and enter state 10
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat0          goto state 112

State 57

	BExpr -> BExpr and . BExpr                          (rule 48)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 40
	AExpr0         goto state 41
	BExpr          goto state 111
	BExpr0         goto state 43

State 58

	BExpr -> BExpr or . BExpr                           (rule 49)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 40
	AExpr0         goto state 41
	BExpr          goto state 110
	BExpr0         goto state 43

State 59

	BExpr -> BExpr "==" . BExpr                         (rule 50)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	AExpr          goto state 40
	AExpr0         goto state 41
	BExpr          goto state 109
	BExpr0         goto state 43

State 60

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	AExpr0 -> "(" AExpr . ")"                           (rule 43)
	BExpr -> AExpr . "==" AExpr                         (rule 51)
	BExpr -> AExpr . "<" AExpr                          (rule 52)
	BExpr -> AExpr . ">" AExpr                          (rule 53)
	BExpr -> AExpr . ">=" AExpr                         (rule 54)
	BExpr -> AExpr . "<=" AExpr                         (rule 55)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"=="           shift, and enter state 69
	"<"            shift, and enter state 70
	">"            shift, and enter state 71
	"<="           shift, and enter state 72
	">="           shift, and enter state 73
	")"            shift, and enter state 96


State 61

	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)
	BExpr0 -> "(" BExpr . ")"                           (rule 58)

	and            shift, and enter state 57
	or             shift, and enter state 58
	"=="           shift, and enter state 59
	")"            shift, and enter state 108


State 62

	BExpr -> not BExpr .                                (rule 47)
	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	then           reduce using rule 47
	do             reduce using rule 47
	and            reduce using rule 47
	or             reduce using rule 47
	"=="           reduce using rule 47
	";"            reduce using rule 47
	")"            reduce using rule 47
	","            reduce using rule 47


State 63

	AExpr0 -> ident "[" . AExpr "]"                     (rule 46)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 107
	AExpr0         goto state 41

State 64

	Stat -> while BExpr do . Stat0                      (rule 16)

	ident          shift, and enter state 10
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat0          goto state 106

State 65

	AExpr -> AExpr "+" . AExpr                          (rule 36)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 105
	AExpr0         goto state 41

State 66

	AExpr -> AExpr "-" . AExpr                          (rule 37)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 104
	AExpr0         goto state 41

State 67

	AExpr -> AExpr "*" . AExpr                          (rule 38)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 103
	AExpr0         goto state 41

State 68

	AExpr -> AExpr "/" . AExpr                          (rule 39)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 102
	AExpr0         goto state 41

State 69

	BExpr -> AExpr "==" . AExpr                         (rule 51)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 101
	AExpr0         goto state 41

State 70

	BExpr -> AExpr "<" . AExpr                          (rule 52)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 100
	AExpr0         goto state 41

State 71

	BExpr -> AExpr ">" . AExpr                          (rule 53)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 99
	AExpr0         goto state 41

State 72

	BExpr -> AExpr "<=" . AExpr                         (rule 55)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 98
	AExpr0         goto state 41

State 73

	BExpr -> AExpr ">=" . AExpr                         (rule 54)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 97
	AExpr0         goto state 41

State 74

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	AExpr0 -> "(" AExpr . ")"                           (rule 43)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	")"            shift, and enter state 96


State 75

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	AExpr0 -> "[" AExpr . "]"                           (rule 44)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"]"            shift, and enter state 95


State 76

	AExpr0 -> "*" AExpr0 .                              (rule 45)

	then           reduce using rule 45
	do             reduce using rule 45
	":="           reduce using rule 45
	"+"            reduce using rule 45
	"-"            reduce using rule 45
	"*"            reduce using rule 45
	"/"            reduce using rule 45
	and            reduce using rule 45
	or             reduce using rule 45
	"=="           reduce using rule 45
	"<"            reduce using rule 45
	">"            reduce using rule 45
	"<="           reduce using rule 45
	">="           reduce using rule 45
	";"            reduce using rule 45
	"]"            reduce using rule 45
	")"            reduce using rule 45
	","            reduce using rule 45


State 77

	Stat0 -> "*" AExpr0 ":=" . AExpr0 ";"               (rule 21)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr0         goto state 94

State 78

	Stat0 -> "(" Stats ")" .                            (rule 25)

	ident          reduce using rule 25
	if             reduce using rule 25
	else           reduce using rule 25
	while          reduce using rule 25
	skip           reduce using rule 25
	"*"            reduce using rule 25
	"("            reduce using rule 25
	")"            reduce using rule 25
	"{"            reduce using rule 25
	"}"            reduce using rule 25
	end            reduce using rule 25
	call           reduce using rule 25
	malloc         reduce using rule 25
	free           reduce using rule 25
	continue       reduce using rule 25
	break          reduce using rule 25
	tyint          reduce using rule 25


State 79

	Stat0 -> "{" Stats "}" .                            (rule 26)

	ident          reduce using rule 26
	if             reduce using rule 26
	else           reduce using rule 26
	while          reduce using rule 26
	skip           reduce using rule 26
	"*"            reduce using rule 26
	"("            reduce using rule 26
	")"            reduce using rule 26
	"{"            reduce using rule 26
	"}"            reduce using rule 26
	end            reduce using rule 26
	call           reduce using rule 26
	malloc         reduce using rule 26
	free           reduce using rule 26
	continue       reduce using rule 26
	break          reduce using rule 26
	tyint          reduce using rule 26


State 80

	Proc -> proc ident "(" . ValArgs ResArg ")" is Stats end    (rule 5)

	val            shift, and enter state 93
	res            reduce using rule 7

	ValArgs        goto state 92

State 81

	Stat0 -> call ident "(" . CallArgs "," ident ")" ";"    (rule 22)

	ident          shift, and enter state 44
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47
	","            reduce using rule 33

	CallArgs       goto state 88
	EitherExpr     goto state 89
	AExpr          goto state 90
	AExpr0         goto state 41
	BExpr          goto state 91
	BExpr0         goto state 43

State 82

	Stat0 -> malloc "(" ident . "," AExpr ")" ";"       (rule 23)

	","            shift, and enter state 87


State 83

	Stat0 -> free "(" AExpr0 . ")" ";"                  (rule 24)

	")"            shift, and enter state 86


State 84

	Stat0 -> tyint ident "[" . AExpr "]" ";"            (rule 29)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 85
	AExpr0         goto state 41

State 85

	Stat0 -> tyint ident "[" AExpr . "]" ";"            (rule 29)
	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"]"            shift, and enter state 128


State 86

	Stat0 -> free "(" AExpr0 ")" . ";"                  (rule 24)

	";"            shift, and enter state 127


State 87

	Stat0 -> malloc "(" ident "," . AExpr ")" ";"       (rule 23)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr          goto state 126
	AExpr0         goto state 41

State 88

	Stat0 -> call ident "(" CallArgs . "," ident ")" ";"    (rule 22)
	CallArgs -> CallArgs . "," EitherExpr               (rule 31)

	","            shift, and enter state 125


State 89

	CallArgs -> EitherExpr .                            (rule 32)

	","            reduce using rule 32


State 90

	EitherExpr -> AExpr .                               (rule 34)
	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr . "==" AExpr                         (rule 51)
	BExpr -> AExpr . "<" AExpr                          (rule 52)
	BExpr -> AExpr . ">" AExpr                          (rule 53)
	BExpr -> AExpr . ">=" AExpr                         (rule 54)
	BExpr -> AExpr . "<=" AExpr                         (rule 55)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"=="           shift, and enter state 69
	"<"            shift, and enter state 70
	">"            shift, and enter state 71
	"<="           shift, and enter state 72
	">="           shift, and enter state 73
	","            reduce using rule 34


State 91

	EitherExpr -> BExpr .                               (rule 35)
	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	and            shift, and enter state 57
	or             shift, and enter state 58
	"=="           shift, and enter state 59
	","            reduce using rule 35


State 92

	Proc -> proc ident "(" ValArgs . ResArg ")" is Stats end    (rule 5)

	res            shift, and enter state 124

	ResArg         goto state 123

State 93

	ValArgs -> val . Args ","                           (rule 6)

	ident          shift, and enter state 122

	Args           goto state 120
	Arg            goto state 121

State 94

	Stat0 -> "*" AExpr0 ":=" AExpr0 . ";"               (rule 21)

	";"            shift, and enter state 119


State 95

	AExpr0 -> "[" AExpr "]" .                           (rule 44)

	then           reduce using rule 44
	do             reduce using rule 44
	":="           reduce using rule 44
	"+"            reduce using rule 44
	"-"            reduce using rule 44
	"*"            reduce using rule 44
	"/"            reduce using rule 44
	and            reduce using rule 44
	or             reduce using rule 44
	"=="           reduce using rule 44
	"<"            reduce using rule 44
	">"            reduce using rule 44
	"<="           reduce using rule 44
	">="           reduce using rule 44
	";"            reduce using rule 44
	"]"            reduce using rule 44
	")"            reduce using rule 44
	","            reduce using rule 44


State 96

	AExpr0 -> "(" AExpr ")" .                           (rule 43)

	then           reduce using rule 43
	do             reduce using rule 43
	":="           reduce using rule 43
	"+"            reduce using rule 43
	"-"            reduce using rule 43
	"*"            reduce using rule 43
	"/"            reduce using rule 43
	and            reduce using rule 43
	or             reduce using rule 43
	"=="           reduce using rule 43
	"<"            reduce using rule 43
	">"            reduce using rule 43
	"<="           reduce using rule 43
	">="           reduce using rule 43
	";"            reduce using rule 43
	"]"            reduce using rule 43
	")"            reduce using rule 43
	","            reduce using rule 43


State 97

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr ">=" AExpr .                         (rule 54)

	then           reduce using rule 54
	do             reduce using rule 54
	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 54
	or             reduce using rule 54
	"=="           reduce using rule 54
	";"            reduce using rule 54
	")"            reduce using rule 54
	","            reduce using rule 54


State 98

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr "<=" AExpr .                         (rule 55)

	then           reduce using rule 55
	do             reduce using rule 55
	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 55
	or             reduce using rule 55
	"=="           reduce using rule 55
	";"            reduce using rule 55
	")"            reduce using rule 55
	","            reduce using rule 55


State 99

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr ">" AExpr .                          (rule 53)

	then           reduce using rule 53
	do             reduce using rule 53
	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 53
	or             reduce using rule 53
	"=="           reduce using rule 53
	";"            reduce using rule 53
	")"            reduce using rule 53
	","            reduce using rule 53


State 100

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr "<" AExpr .                          (rule 52)

	then           reduce using rule 52
	do             reduce using rule 52
	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 52
	or             reduce using rule 52
	"=="           reduce using rule 52
	";"            reduce using rule 52
	")"            reduce using rule 52
	","            reduce using rule 52


State 101

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	BExpr -> AExpr "==" AExpr .                         (rule 51)

	then           reduce using rule 51
	do             reduce using rule 51
	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 51
	or             reduce using rule 51
	"=="           reduce using rule 51
	";"            reduce using rule 51
	")"            reduce using rule 51
	","            reduce using rule 51


State 102

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	AExpr -> AExpr "/" AExpr .                          (rule 39)

	then           reduce using rule 39
	do             reduce using rule 39
	"+"            reduce using rule 39
	"-"            reduce using rule 39
	"*"            reduce using rule 39
	"/"            reduce using rule 39
	and            reduce using rule 39
	or             reduce using rule 39
	"=="           reduce using rule 39
	"<"            reduce using rule 39
	">"            reduce using rule 39
	"<="           reduce using rule 39
	">="           reduce using rule 39
	";"            reduce using rule 39
	"]"            reduce using rule 39
	")"            reduce using rule 39
	","            reduce using rule 39


State 103

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr "*" AExpr .                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)

	then           reduce using rule 38
	do             reduce using rule 38
	"+"            reduce using rule 38
	"-"            reduce using rule 38
	"*"            reduce using rule 38
	"/"            reduce using rule 38
	and            reduce using rule 38
	or             reduce using rule 38
	"=="           reduce using rule 38
	"<"            reduce using rule 38
	">"            reduce using rule 38
	"<="           reduce using rule 38
	">="           reduce using rule 38
	";"            reduce using rule 38
	"]"            reduce using rule 38
	")"            reduce using rule 38
	","            reduce using rule 38


State 104

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr "-" AExpr .                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)

	then           reduce using rule 37
	do             reduce using rule 37
	"+"            reduce using rule 37
	"-"            reduce using rule 37
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 37
	or             reduce using rule 37
	"=="           reduce using rule 37
	"<"            reduce using rule 37
	">"            reduce using rule 37
	"<="           reduce using rule 37
	">="           reduce using rule 37
	";"            reduce using rule 37
	"]"            reduce using rule 37
	")"            reduce using rule 37
	","            reduce using rule 37


State 105

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr "+" AExpr .                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)

	then           reduce using rule 36
	do             reduce using rule 36
	"+"            reduce using rule 36
	"-"            reduce using rule 36
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	and            reduce using rule 36
	or             reduce using rule 36
	"=="           reduce using rule 36
	"<"            reduce using rule 36
	">"            reduce using rule 36
	"<="           reduce using rule 36
	">="           reduce using rule 36
	";"            reduce using rule 36
	"]"            reduce using rule 36
	")"            reduce using rule 36
	","            reduce using rule 36


State 106

	Stat -> while BExpr do Stat0 .                      (rule 16)

	ident          reduce using rule 16
	if             reduce using rule 16
	while          reduce using rule 16
	skip           reduce using rule 16
	"*"            reduce using rule 16
	"("            reduce using rule 16
	")"            reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	end            reduce using rule 16
	call           reduce using rule 16
	malloc         reduce using rule 16
	free           reduce using rule 16
	continue       reduce using rule 16
	break          reduce using rule 16
	tyint          reduce using rule 16


State 107

	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)
	AExpr0 -> ident "[" AExpr . "]"                     (rule 46)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	"]"            shift, and enter state 118


State 108

	BExpr0 -> "(" BExpr ")" .                           (rule 58)

	then           reduce using rule 58
	do             reduce using rule 58
	and            reduce using rule 58
	or             reduce using rule 58
	"=="           reduce using rule 58
	";"            reduce using rule 58
	")"            reduce using rule 58
	","            reduce using rule 58


State 109

	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)
	BExpr -> BExpr "==" BExpr .                         (rule 50)

	then           reduce using rule 50
	do             reduce using rule 50
	and            reduce using rule 50
	or             reduce using rule 50
	"=="           fail
	";"            reduce using rule 50
	")"            reduce using rule 50
	","            reduce using rule 50


State 110

	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr or BExpr .                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	then           reduce using rule 49
	do             reduce using rule 49
	and            shift, and enter state 57
	or             reduce using rule 49
	"=="           shift, and enter state 59
	";"            reduce using rule 49
	")"            reduce using rule 49
	","            reduce using rule 49


State 111

	BExpr -> BExpr . and BExpr                          (rule 48)
	BExpr -> BExpr and BExpr .                          (rule 48)
	BExpr -> BExpr . or BExpr                           (rule 49)
	BExpr -> BExpr . "==" BExpr                         (rule 50)

	then           reduce using rule 48
	do             reduce using rule 48
	and            reduce using rule 48
	or             reduce using rule 48
	"=="           shift, and enter state 59
	";"            reduce using rule 48
	")"            reduce using rule 48
	","            reduce using rule 48


State 112

	Stat -> if BExpr then Stat0 . else Stat0            (rule 14)
	Stat -> if BExpr then Stat0 .                       (rule 15)

	ident          reduce using rule 15
	if             reduce using rule 15
	else           shift, and enter state 117
	while          reduce using rule 15
	skip           reduce using rule 15
	"*"            reduce using rule 15
	"("            reduce using rule 15
	")"            reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	end            reduce using rule 15
	call           reduce using rule 15
	malloc         reduce using rule 15
	free           reduce using rule 15
	continue       reduce using rule 15
	break          reduce using rule 15
	tyint          reduce using rule 15


State 113

	Stat0 -> ident ":=" BExpr ";" .                     (rule 20)

	ident          reduce using rule 20
	if             reduce using rule 20
	else           reduce using rule 20
	while          reduce using rule 20
	skip           reduce using rule 20
	"*"            reduce using rule 20
	"("            reduce using rule 20
	")"            reduce using rule 20
	"{"            reduce using rule 20
	"}"            reduce using rule 20
	end            reduce using rule 20
	call           reduce using rule 20
	malloc         reduce using rule 20
	free           reduce using rule 20
	continue       reduce using rule 20
	break          reduce using rule 20
	tyint          reduce using rule 20


State 114

	Stat0 -> ident ":=" AExpr ";" .                     (rule 19)

	ident          reduce using rule 19
	if             reduce using rule 19
	else           reduce using rule 19
	while          reduce using rule 19
	skip           reduce using rule 19
	"*"            reduce using rule 19
	"("            reduce using rule 19
	")"            reduce using rule 19
	"{"            reduce using rule 19
	"}"            reduce using rule 19
	end            reduce using rule 19
	call           reduce using rule 19
	malloc         reduce using rule 19
	free           reduce using rule 19
	continue       reduce using rule 19
	break          reduce using rule 19
	tyint          reduce using rule 19


State 115

	Stat0 -> ident "[" AExpr "]" . ":=" AExpr0 ";"      (rule 30)

	":="           shift, and enter state 116


State 116

	Stat0 -> ident "[" AExpr "]" ":=" . AExpr0 ";"      (rule 30)

	ident          shift, and enter state 34
	int            shift, and enter state 35
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 38

	AExpr0         goto state 137

State 117

	Stat -> if BExpr then Stat0 else . Stat0            (rule 14)

	ident          shift, and enter state 10
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat0          goto state 136

State 118

	AExpr0 -> ident "[" AExpr "]" .                     (rule 46)

	then           reduce using rule 46
	do             reduce using rule 46
	":="           reduce using rule 46
	"+"            reduce using rule 46
	"-"            reduce using rule 46
	"*"            reduce using rule 46
	"/"            reduce using rule 46
	and            reduce using rule 46
	or             reduce using rule 46
	"=="           reduce using rule 46
	"<"            reduce using rule 46
	">"            reduce using rule 46
	"<="           reduce using rule 46
	">="           reduce using rule 46
	";"            reduce using rule 46
	"]"            reduce using rule 46
	")"            reduce using rule 46
	","            reduce using rule 46


State 119

	Stat0 -> "*" AExpr0 ":=" AExpr0 ";" .               (rule 21)

	ident          reduce using rule 21
	if             reduce using rule 21
	else           reduce using rule 21
	while          reduce using rule 21
	skip           reduce using rule 21
	"*"            reduce using rule 21
	"("            reduce using rule 21
	")"            reduce using rule 21
	"{"            reduce using rule 21
	"}"            reduce using rule 21
	end            reduce using rule 21
	call           reduce using rule 21
	malloc         reduce using rule 21
	free           reduce using rule 21
	continue       reduce using rule 21
	break          reduce using rule 21
	tyint          reduce using rule 21


State 120

	ValArgs -> val Args . ","                           (rule 6)
	Args -> Args . "," Arg                              (rule 9)

	","            shift, and enter state 135


State 121

	Args -> Arg .                                       (rule 10)

	","            reduce using rule 10


State 122

	Arg -> ident .                                      (rule 11)

	")"            reduce using rule 11
	","            reduce using rule 11


State 123

	Proc -> proc ident "(" ValArgs ResArg . ")" is Stats end    (rule 5)

	")"            shift, and enter state 134


State 124

	ResArg -> res . Arg                                 (rule 8)

	ident          shift, and enter state 122

	Arg            goto state 133

State 125

	Stat0 -> call ident "(" CallArgs "," . ident ")" ";"    (rule 22)
	CallArgs -> CallArgs "," . EitherExpr               (rule 31)

	ident          shift, and enter state 132
	int            shift, and enter state 35
	bool           shift, and enter state 45
	not            shift, and enter state 46
	"*"            shift, and enter state 36
	"["            shift, and enter state 37
	"("            shift, and enter state 47

	EitherExpr     goto state 131
	AExpr          goto state 90
	AExpr0         goto state 41
	BExpr          goto state 91
	BExpr0         goto state 43

State 126

	Stat0 -> malloc "(" ident "," AExpr . ")" ";"       (rule 23)
	AExpr -> AExpr . "+" AExpr                          (rule 36)
	AExpr -> AExpr . "-" AExpr                          (rule 37)
	AExpr -> AExpr . "*" AExpr                          (rule 38)
	AExpr -> AExpr . "/" AExpr                          (rule 39)

	"+"            shift, and enter state 65
	"-"            shift, and enter state 66
	"*"            shift, and enter state 67
	"/"            shift, and enter state 68
	")"            shift, and enter state 130


State 127

	Stat0 -> free "(" AExpr0 ")" ";" .                  (rule 24)

	ident          reduce using rule 24
	if             reduce using rule 24
	else           reduce using rule 24
	while          reduce using rule 24
	skip           reduce using rule 24
	"*"            reduce using rule 24
	"("            reduce using rule 24
	")"            reduce using rule 24
	"{"            reduce using rule 24
	"}"            reduce using rule 24
	end            reduce using rule 24
	call           reduce using rule 24
	malloc         reduce using rule 24
	free           reduce using rule 24
	continue       reduce using rule 24
	break          reduce using rule 24
	tyint          reduce using rule 24


State 128

	Stat0 -> tyint ident "[" AExpr "]" . ";"            (rule 29)

	";"            shift, and enter state 129


State 129

	Stat0 -> tyint ident "[" AExpr "]" ";" .            (rule 29)

	ident          reduce using rule 29
	if             reduce using rule 29
	else           reduce using rule 29
	while          reduce using rule 29
	skip           reduce using rule 29
	"*"            reduce using rule 29
	"("            reduce using rule 29
	")"            reduce using rule 29
	"{"            reduce using rule 29
	"}"            reduce using rule 29
	end            reduce using rule 29
	call           reduce using rule 29
	malloc         reduce using rule 29
	free           reduce using rule 29
	continue       reduce using rule 29
	break          reduce using rule 29
	tyint          reduce using rule 29


State 130

	Stat0 -> malloc "(" ident "," AExpr ")" . ";"       (rule 23)

	";"            shift, and enter state 142


State 131

	CallArgs -> CallArgs "," EitherExpr .               (rule 31)

	","            reduce using rule 31


State 132

	Stat0 -> call ident "(" CallArgs "," ident . ")" ";"    (rule 22)
	AExpr0 -> ident .                                   (rule 42)
	AExpr0 -> ident . "[" AExpr "]"                     (rule 46)
	BExpr0 -> ident .                                   (rule 59)

	"+"            reduce using rule 42
	"-"            reduce using rule 42
	"*"            reduce using rule 42
	"/"            reduce using rule 42
	and            reduce using rule 59
	or             reduce using rule 59
	"=="           reduce using rule 59
			(reduce using rule 42)

	"<"            reduce using rule 42
	">"            reduce using rule 42
	"<="           reduce using rule 42
	">="           reduce using rule 42
	"["            shift, and enter state 63
	")"            shift, and enter state 141
	","            reduce using rule 59
			(reduce using rule 42)



State 133

	ResArg -> res Arg .                                 (rule 8)

	")"            reduce using rule 8


State 134

	Proc -> proc ident "(" ValArgs ResArg ")" . is Stats end    (rule 5)

	is             shift, and enter state 140


State 135

	ValArgs -> val Args "," .                           (rule 6)
	Args -> Args "," . Arg                              (rule 9)

	ident          shift, and enter state 122
	res            reduce using rule 6

	Arg            goto state 139

State 136

	Stat -> if BExpr then Stat0 else Stat0 .            (rule 14)

	ident          reduce using rule 14
	if             reduce using rule 14
	while          reduce using rule 14
	skip           reduce using rule 14
	"*"            reduce using rule 14
	"("            reduce using rule 14
	")"            reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	end            reduce using rule 14
	call           reduce using rule 14
	malloc         reduce using rule 14
	free           reduce using rule 14
	continue       reduce using rule 14
	break          reduce using rule 14
	tyint          reduce using rule 14


State 137

	Stat0 -> ident "[" AExpr "]" ":=" AExpr0 . ";"      (rule 30)

	";"            shift, and enter state 138


State 138

	Stat0 -> ident "[" AExpr "]" ":=" AExpr0 ";" .      (rule 30)

	ident          reduce using rule 30
	if             reduce using rule 30
	else           reduce using rule 30
	while          reduce using rule 30
	skip           reduce using rule 30
	"*"            reduce using rule 30
	"("            reduce using rule 30
	")"            reduce using rule 30
	"{"            reduce using rule 30
	"}"            reduce using rule 30
	end            reduce using rule 30
	call           reduce using rule 30
	malloc         reduce using rule 30
	free           reduce using rule 30
	continue       reduce using rule 30
	break          reduce using rule 30
	tyint          reduce using rule 30


State 139

	Args -> Args "," Arg .                              (rule 9)

	","            reduce using rule 9


State 140

	Proc -> proc ident "(" ValArgs ResArg ")" is . Stats end    (rule 5)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stats          goto state 144
	Stat           goto state 8
	Stat0          goto state 9

State 141

	Stat0 -> call ident "(" CallArgs "," ident ")" . ";"    (rule 22)

	";"            shift, and enter state 143


State 142

	Stat0 -> malloc "(" ident "," AExpr ")" ";" .       (rule 23)

	ident          reduce using rule 23
	if             reduce using rule 23
	else           reduce using rule 23
	while          reduce using rule 23
	skip           reduce using rule 23
	"*"            reduce using rule 23
	"("            reduce using rule 23
	")"            reduce using rule 23
	"{"            reduce using rule 23
	"}"            reduce using rule 23
	end            reduce using rule 23
	call           reduce using rule 23
	malloc         reduce using rule 23
	free           reduce using rule 23
	continue       reduce using rule 23
	break          reduce using rule 23
	tyint          reduce using rule 23


State 143

	Stat0 -> call ident "(" CallArgs "," ident ")" ";" .    (rule 22)

	ident          reduce using rule 22
	if             reduce using rule 22
	else           reduce using rule 22
	while          reduce using rule 22
	skip           reduce using rule 22
	"*"            reduce using rule 22
	"("            reduce using rule 22
	")"            reduce using rule 22
	"{"            reduce using rule 22
	"}"            reduce using rule 22
	end            reduce using rule 22
	call           reduce using rule 22
	malloc         reduce using rule 22
	free           reduce using rule 22
	continue       reduce using rule 22
	break          reduce using rule 22
	tyint          reduce using rule 22


State 144

	Proc -> proc ident "(" ValArgs ResArg ")" is Stats . end    (rule 5)
	Stats -> Stats . Stat                               (rule 12)

	ident          shift, and enter state 10
	if             shift, and enter state 11
	while          shift, and enter state 12
	skip           shift, and enter state 13
	"*"            shift, and enter state 14
	"("            shift, and enter state 15
	"{"            shift, and enter state 16
	end            shift, and enter state 145
	call           shift, and enter state 18
	malloc         shift, and enter state 19
	free           shift, and enter state 20
	continue       shift, and enter state 21
	break          shift, and enter state 22
	tyint          shift, and enter state 23

	Stat           goto state 51
	Stat0          goto state 9

State 145

	Proc -> proc ident "(" ValArgs ResArg ")" is Stats end .    (rule 5)

	ident          reduce using rule 5
	if             reduce using rule 5
	while          reduce using rule 5
	skip           reduce using rule 5
	"*"            reduce using rule 5
	"("            reduce using rule 5
	"{"            reduce using rule 5
	proc           reduce using rule 5
	call           reduce using rule 5
	malloc         reduce using rule 5
	free           reduce using rule 5
	continue       reduce using rule 5
	break          reduce using rule 5
	tyint          reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 60
Number of terminals: 42
Number of non-terminals: 18
Number of states: 146
